{
  "arkham-core/library/Arkham/Types/Scenario/Scenarios/*.hs": {
    "type": "scenario",
    "alternate": "arkham-core/tests/Arkham/Types/Scenario/Scenarios/{}Spec.hs",
    "template": [
      "module Arkham.Types.Scenario.Scenarios.{dot}",
      "  ( {dot}(..)",
      "  , {dot|snakecase|camelcase}",
      "  ) where",
      "",
      "import Arkham.Prelude",
      "",
      "import Arkham.Types.Classes",
      "import Arkham.Types.Difficulty",
      "import Arkham.Types.InvestigatorId",
      "import Arkham.Types.Scenario.Attrs",
      "import Arkham.Types.Token",
      "",
      "newtype {dot} = {dot} ScenarioAttrs",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: Difficulty -> {dot}",
      "{dot|snakecase|camelcase} difficulty = {dot} $ baseAttrs",
      "  \"TODO: ID\"",
      "  \"TODO: NAME\"",
      "  [\"TODO: AgendIds\"]",
      "  [\"TODO: ActIds\"]",
      "  difficulty",
      "",
      "instance HasRecord {dot} where",
      "  hasRecord _ _ = False",
      "  hasRecordSet _ _ = []",
      "  hasRecordCount _ _ = 0",
      "",
      "instance HasTokenValue env InvestigatorId => HasTokenValue env {dot} where",
      "  getTokenValue ({dot} attrs) iid = \\case",
      "    Skull -> pure $ toTokenValue attrs Skull 3 5",
      "    Cultist -> pure $ TokenValue Cultist NoModifier",
      "    Tablet -> pure $ TokenValue Tablet NoModifier",
      "    ElderThing -> pure $ TokenValue ElderThing NoModifier",
      "    otherFace -> getTokenValue attrs iid otherFace",
      "",
      "instance ScenarioAttrsRunner env => RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Campaign/Campaigns/*.hs": {
    "type": "campaign",
    "alternate": "arkham-core/tests/Arkham/Types/Campaign/Campaigns/{}Spec.hs"
  },
  "arkham-core/library/Arkham/Types/Agenda/Cards/*.hs": {
    "type": "agenda",
    "alternate": "arkham-core/tests/Arkham/Types/Agenda/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Agenda.Cards.{dot}",
      "  ( {dot}",
      "  , {dot|snakecase|camelcase}",
      "  ) where",
      "",
      "import Arkham.Prelude",
      "",
      "import Arkham.Types.Agenda.Attrs",
      "import Arkham.Types.Agenda.Runner",
      "import Arkham.Types.Classes",
      "import Arkham.Types.GameValue",
      "import Arkham.Types.Message",
      "",
      "newtype {dot} = {dot} AgendaAttrs",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: {dot}",
      "{dot|snakecase|camelcase} = {dot}",
      "  $ baseAttrs \"TODO: ID\" \"TODO: NAME\" (Agenda 1 A) (Static 12)",
      "",
      "instance HasModifiersFor env {dot} where",
      "  getModifiersFor = noModifiersFor",
      "",
      "instance HasActions env {dot} where",
      "  getActions i window ({dot} x) = getActions i window x",
      "",
      "instance AgendaRunner env => RunMessage env {dot} where",
      "  runMessage msg a@({dot} attrs@AgendaAttrs {open}..{close}) =",
      "    case msg of",
      "      AdvanceAgenda aid | aid == agendaId && agendaSequence == Agenda 1 B ->",
      "        a <$ unshiftMessages [NextAgenda aid \"TODO\"]",
      "      _ -> {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Act/Cards/*.hs": {
    "type": "act",
    "alternate": "arkham-core/tests/Arkham/Types/Act/Cards/{}Spec.hs"
  },
  "arkham-core/library/Arkham/Types/Effect/Effects/*.hs": {
    "type": "effect",
    "alternate": "arkham-core/tests/Arkham/Types/Effect/Effects/{}Spec.hs"
  },
  "arkham-core/library/Arkham/Types/Treachery/Cards/*.hs": {
    "type": "treachery",
    "alternate": "arkham-core/tests/Arkham/Types/Treachery/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Treachery.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import Arkham.Types.Classes",
      "import Arkham.Types.Message",
      "import Arkham.Types.Treachery.Attrs",
      "import Arkham.Types.Treachery.Runner",
      "import Arkham.Types.TreacheryId",
      "",
      "newtype {dot} = {dot} TreacheryAttrs",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: TreacheryId -> a -> {dot}",
      "{dot|snakecase|camelcase} uuid _ = {dot} $ baseAttrs uuid \"TODO\"",
      "",
      "instance HasModifiersFor env {dot} where",
      "  getModifiersFor = noModifiersFor",
      "",
      "instance HasActions env {dot} where",
      "  getActions i window ({dot} attrs) = getActions i window attrs",
      "",
      "instance TreacheryRunner env => RunMessage env {dot} where",
      "  runMessage msg t@({dot} attrs@TreacheryAttrs {open}..{close}) = case msg of",
      "    Revelation _iid source | isSource attrs source -> pure t",
      "    _ -> {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Investigator/Cards/*.hs": {
    "type": "investigator",
    "alternate": "arkham-core/tests/Arkham/Types/Investigator/Cards/{}Spec.hs"
  },
  "arkham-core/library/Arkham/Types/Enemy/Cards/*.hs": {
    "type": "enemy",
    "alternate": "arkham-core/tests/Arkham/Types/Enemy/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Enemy.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import Arkham.Types.Classes",
      "import Arkham.Types.Enemy.Attrs",
      "import Arkham.Types.EnemyId",
      "import Arkham.Types.GameValue",
      "",
      "newtype {dot} = {dot} EnemyAttrs",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: EnemyId -> {dot}",
      "{dot|snakecase|camelcase} uuid =",
      "  {dot}",
      "    $ baseAttrs uuid \"TODO\"",
      "    $ (healthDamageL .~ 0)",
      "    . (sanityDamageL .~ 0)",
      "    . (fightL .~ 1)",
      "    . (healthL .~ Static 1)",
      "    . (evadeL .~ 1)",
      "",
      "instance HasModifiersFor env {dot} where",
      "  getModifiersFor = noModifiersFor",
      "",
      "instance EnemyAttrsHasActions env => HasActions env {dot} where",
      "  getActions i window ({dot} attrs) = getActions i window attrs",
      "",
      "instance EnemyAttrsRunMessage env => RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Asset/Cards/*.hs": {
    "type": "asset",
    "alternate": "arkham-core/tests/Arkham/Types/Asset/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Asset.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Asset.Cards as Cards",
      "import Arkham.Types.Asset.Attrs",
      "import Arkham.Types.Classes",
      "",
      "newtype {dot} = {dot} AssetAttrs",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: AssetCard {dot}",
      "{dot|snakecase|camelcase} =",
      "  asset {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance HasActions env {dot} where",
      "  getActions iid window ({dot} attrs) = getActions iid window attrs",
      "",
      "instance HasModifiersFor env {dot} where",
      "  getModifiersFor = noModifiersFor",
      "",
      "instance (HasQueue env, HasModifiersFor env ()) => RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) = {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Event/Cards/*.hs": {
    "type": "event",
    "alternate": "arkham-core/tests/Arkham/Types/Events/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Event.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Event.Cards as Cards",
      "import Arkham.Types.Classes",
      "import Arkham.Types.Event.Attrs",
      "",
      "newtype {dot} = {dot} EventAttrs",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: EventCard {dot}",
      "{dot|snakecase|camelcase} =",
      "  event {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance HasActions env {dot} where",
      "  getActions iid window ({dot} attrs) = getActions iid window attrs",
      "",
      "instance HasModifiersFor env {dot} where",
      "  getModifiersFor = noModifiersFor",
      "",
      "instance RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) = {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Location/Cards/*.hs": {
    "type": "location",
    "alternate": "arkham-core/tests/Arkham/Types/Location/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Location.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import Arkham.Types.Classes",
      "import qualified Arkham.Types.EncounterSet as EncounterSet",
      "import Arkham.Types.GameValue",
      "import Arkham.Types.Location.Attrs",
      "import Arkham.Types.Location.Runner",
      "import Arkham.Types.LocationId",
      "import Arkham.Types.LocationSymbol",
      "import Arkham.Types.Name",
      "",
      "newtype {dot} = {dot} LocationAttrs",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: LocationId -> {dot}",
      "{dot|snakecase|camelcase} lid = {dot} $ baseAttrs",
      "  lid",
      "  \"TODO: CardCode\"",
      "  (Name \"TODO: Name\" Nothing)",
      "  EncounterSet.TODO",
      "  0",
      "  (Static 0)",
      "  TODOShape",
      "  []",
      "  mempty",
      "",
      "instance HasModifiersFor env {dot} where",
      "  getModifiersFor = noModifiersFor",
      "",
      "instance ActionRunner env => HasActions env {dot} where",
      "  getActions iid window ({dot} attrs) =",
      "    getActions iid window attrs",
      "",
      "instance LocationRunner env => RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
      ]
  },
  "arkham-core/library/Arkham/Types/Skill/Cards/*.hs": {
    "type": "skill",
    "alternate": "arkham-core/tests/Arkham/Types/Skill/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Skill.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Skill.Cards as Cards",
      "import Arkham.Types.Classes",
      "import Arkham.Types.Skill.Attrs",
      "import Arkham.Types.Skill.Runner",
      "",
      "newtype {dot} = {dot} SkillAttrs",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: SkillCard {dot}",
      "{dot|snakecase|camelcase} =",
      "  skill {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance HasModifiersFor env {dot}",
      "",
      "instance HasActions env {dot} where",
      "  getActions iid window ({dot} attrs) = getActions iid window attrs",
      "",
      "instance SkillRunner env => RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) = {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/*.hs": {
    "type": "core",
    "alternate": "arkham-core/tests/Arkham/Types/{}Spec.hs",
    "template": [
      "module Arkham.Types.{dot}",
      "  ( undefined",
      "  )",
      "where",
      "",
      "import Arkham.Prelude"
    ]
  },
  "arkham-core/tests/Arkham/Types/*Spec.hs": {
    "alternate": "arkham-core/library/Arkham/Types/{}.hs",
    "template": [
      "module Arkham.Types.{dot}Spec",
      "  ( spec",
      "  )",
      "where",
      "",
      "import TestImport",
      "",
      "spec :: Spec",
      "spec = undefined"
    ]
  }
}
