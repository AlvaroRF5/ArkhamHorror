{
  "arkham-core/library/Arkham/Types/Effect/Effects/*.hs": {
    "type": "effect",
    "alternate": "arkham-core/tests/Arkham/Types/Effect/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Effect.Effects.{dot}",
      "  ( {dot}(..)",
      "  , {dot|snakecase|camelcase}",
      "  ) where",
      "",
      "import Arkham.Prelude",
      "",
      "import Arkham.Types.Classes",
      "import Arkham.Types.Effect.Attrs",
      "",
      "newtype {dot} = {dot} EffectAttrs",
      "  deriving anyclass HasAbilities",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: EffectArgs -> {dot}",
      "{dot|snakecase|camelcase} = {dot} . uncurry4 (baseAttrs \"TODO: ID\")",
      "",
      "instance HasModifiersFor env {dot}",
      "",
      "instance HasQueue env => RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Act/Cards/*.hs": {
    "type": "act",
    "alternate": "arkham-core/tests/Arkham/Types/Act/Cards/{}Spec.hs",
    "template": [
       "module Arkham.Types.Act.Cards.{dot}",
       "  ( {dot}(..)",
       "  , {dot|snakecase|camelcase}",
       "  ) where",
       "",
       "import Arkham.Prelude",
       "",
       "import qualified Arkham.Act.Cards as Cards",
       "import Arkham.Types.Act.Attrs",
       "import Arkham.Types.Act.Runner",
       "import Arkham.Types.Classes",
       "",
       "newtype {dot} = {dot} ActAttrs",
       "  deriving anyclass (IsAct, HasModifiersFor env, HasAbilities)",
       "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
       "",
       "{dot|snakecase|camelcase} :: ActCard {dot}",
       "{dot|snakecase|camelcase} = act (1, A) {dot} Cards.{dot|snakecase|camelcase} Nothing",
       "",
       "instance ActRunner env => RunMessage env {dot} where",
       "  runMessage msg ({dot} attrs) = {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Scenario/Scenarios/*.hs": {
    "type": "scenario",
    "alternate": "arkham-core/tests/Arkham/Types/Scenario/Scenarios/{}Spec.hs",
    "template": [
      "module Arkham.Types.Scenario.Scenarios.{dot}",
      "  ( {dot}(..)",
      "  , {dot|snakecase|camelcase}",
      "  ) where",
      "",
      "import Arkham.Prelude",
      "",
      "import Arkham.Types.Classes",
      "import Arkham.Types.Difficulty",
      "import Arkham.Types.InvestigatorId",
      "import Arkham.Types.Scenario.Attrs",
      "import Arkham.Types.Token",
      "",
      "newtype {dot} = {dot} ScenarioAttrs",
      "  deriving anyclass IsScenario",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: Difficulty -> {dot}",
      "{dot|snakecase|camelcase} difficulty = {dot} $ baseAttrs",
      "  \"TODO: ID\"",
      "  \"TODO: NAME\"",
      "  [\"TODO: AgendIds\"]",
      "  [\"TODO: ActIds\"]",
      "  difficulty",
      "",
      "instance HasRecord {dot} where",
      "  hasRecord _ = pure False",
      "  hasRecordSet _ = pure []",
      "  hasRecordCount _ = pure 0",
      "",
      "instance HasTokenValue env InvestigatorId => HasTokenValue env {dot} where",
      "  getTokenValue ({dot} attrs) iid = \\case",
      "    Skull -> pure $ toTokenValue attrs Skull 3 5",
      "    Cultist -> pure $ TokenValue Cultist NoModifier",
      "    Tablet -> pure $ TokenValue Tablet NoModifier",
      "    ElderThing -> pure $ TokenValue ElderThing NoModifier",
      "    otherFace -> getTokenValue attrs iid otherFace",
      "",
      "instance ScenarioRunner env => RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Campaign/Campaigns/*.hs": {
    "type": "campaign",
    "alternate": "arkham-core/tests/Arkham/Types/Campaign/Campaigns/{}Spec.hs",
    "template": [
       "module Arkham.Types.Campaign.Campaigns.{dot}",
       "  ( {dot}(..)",
       "  , {dot|snakecase|camelcase}",
       "  ) where",
       "",
       "import Arkham.Prelude",
       "",
       "import Arkham.Types.Campaign.Attrs",
       "import Arkham.Types.Campaign.Runner",
       "import Arkham.Types.CampaignId",
       "import Arkham.Types.Classes",
       "import Arkham.Types.Difficulty",
       "import Arkham.Types.Token",
       "",
       "newtype {dot} = {dot} CampaignAttrs",
       "  deriving anyclass IsCampaign",
       "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
       "",
       "{dot|snakecase|camelcase} :: Difficulty -> {dot}",
       "{dot|snakecase|camelcase} difficulty = {dot} $ baseAttrs",
       "  (CampaignId \"TODO: ID\")",
       "  \"TODO: Name\"",
       "  difficulty",
       "  chaosBagContents",
       " where",
       "  chaosBagContents = case difficulty of",
       "    Easy -> []",
       "    Standard -> []",
       "    Hard -> []",
       "    Expert -> []",
       "",
       "instance CampaignRunner env => RunMessage env {dot} where",
       "  runMessage msg ({dot} attrs) = {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Agenda/Cards/*.hs": {
    "type": "agenda",
    "alternate": "arkham-core/tests/Arkham/Types/Agenda/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Agenda.Cards.{dot}",
      "  ( {dot}",
      "  , {dot|snakecase|camelcase}",
      "  ) where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Agenda.Cards as Cards",
      "import Arkham.Types.Agenda.Attrs",
      "import Arkham.Types.Agenda.Runner",
      "import Arkham.Types.Classes",
      "import Arkham.Types.GameValue",
      "import Arkham.Types.Message",
      "",
      "newtype {dot} = {dot} AgendaAttrs",
      "  deriving anyclass (IsAgenda, HasModifiersFor env, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: AgendaCard {dot}",
      "{dot|snakecase|camelcase} = agenda (1, A) {dot} Cards.{dot|snakecase|camelcase} (Static 12)",
      "",
      "instance AgendaRunner env => RunMessage env {dot} where",
      "  runMessage msg a@({dot} attrs) =",
      "    case msg of",
      "      AdvanceAgenda aid | aid == toId attrs && onSide B attrs ->",
      "        a <$ pushAll [NextAgenda aid \"TODO\"]",
      "      _ -> {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Treachery/Cards/*.hs": {
    "type": "treachery",
    "alternate": "arkham-core/tests/Arkham/Types/Treachery/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Treachery.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Treachery.Cards as Cards",
      "import Arkham.Types.Classes",
      "import Arkham.Types.Message",
      "import Arkham.Types.Treachery.Attrs",
      "import Arkham.Types.Treachery.Runner",
      "",
      "newtype {dot} = {dot} TreacheryAttrs",
      "  deriving anyclass (IsTreachery, HasModifiersFor env, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: TreacheryCard {dot}",
      "{dot|snakecase|camelcase} = treachery {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance TreacheryRunner env => RunMessage env {dot} where",
      "  runMessage msg t@({dot} attrs) = case msg of",
      "    Revelation _iid source | isSource attrs source -> t <$ push (Discard $ toTarget attrs)",
      "    _ -> {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Investigator/Cards/*.hs": {
    "type": "investigator",
    "alternate": "arkham-core/tests/Arkham/Types/Investigator/Cards/{}Spec.hs"
  },
  "arkham-core/library/Arkham/Types/Enemy/Cards/*.hs": {
    "type": "enemy",
    "alternate": "arkham-core/tests/Arkham/Types/Enemy/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Enemy.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Enemy.Cards as Cards",
      "import Arkham.Types.Classes",
      "import Arkham.Types.Enemy.Attrs",
      "import Arkham.Types.Enemy.Runner",
      "",
      "newtype {dot} = {dot} EnemyAttrs",
      "  deriving anyclass (IsEnemy, HasModifiersFor env)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity, HasAbilities)",
      "",
      "{dot|snakecase|camelcase} :: EnemyCard {dot}",
      "{dot|snakecase|camelcase} = enemy {dot} Cards.{dot|snakecase|camelcase} (0, Static 1, 0) (0, 0)",
      "",
      "instance EnemyRunner env => RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Asset/Cards/*.hs": {
    "type": "asset",
    "alternate": "arkham-core/tests/Arkham/Types/Asset/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Asset.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Asset.Cards as Cards",
      "import Arkham.Types.Asset.Attrs",
      "",
      "newtype {dot} = {dot} AssetAttrs",
      "  deriving anyclass (IsAsset, HasModifiersFor env, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: AssetCard {dot}",
      "{dot|snakecase|camelcase} =",
      "  asset {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance AssetRunner env => RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) = {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Event/Cards/*.hs": {
    "type": "event",
    "alternate": "arkham-core/tests/Arkham/Types/Events/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Event.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Event.Cards as Cards",
      "import Arkham.Types.Classes",
      "import Arkham.Types.Event.Attrs",
      "import Arkham.Types.Event.Runner",
      "import Arkham.Types.Message",
      "",
      "newtype {dot} = {dot} EventAttrs",
      "  deriving anyclass (IsEvent, HasModifiersFor env, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: EventCard {dot}",
      "{dot|snakecase|camelcase} =",
      "  event {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance EventRunner env => RunMessage env {dot} where",
      "  runMessage msg e@({dot} attrs) = case msg of",
      "    InvestigatorPlayEvent _ eid _ _ | eid == toId attrs -> do",
      "      e <$ pushAll [Discard (toTarget attrs)]",
      "    _ -> {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Location/Cards/*.hs": {
    "type": "location",
    "alternate": "arkham-core/tests/Arkham/Types/Location/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Location.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Location.Cards as Cards",
      "import Arkham.Types.Classes",
      "import Arkham.Types.GameValue",
      "import Arkham.Types.Location.Attrs",
      "",
      "newtype {dot} = {dot} LocationAttrs",
      "  deriving anyclass (IsLocation, HasModifiersFor env)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: LocationCard {dot}",
      "{dot|snakecase|camelcase} = location {dot} Cards.{dot|snakecase|camelcase} 0 (Static 0) NoSymbol []",
      "",
      "instance HasAbilities {dot} where",
      "  getAbilities ({dot} attrs) =",
      "    getAbilities attrs",
      "",
      "instance LocationRunner env => RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
      ]
  },
  "arkham-core/library/Arkham/Types/Skill/Cards/*.hs": {
    "type": "skill",
    "alternate": "arkham-core/tests/Arkham/Types/Skill/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Types.Skill.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Skill.Cards as Cards",
      "import Arkham.Types.Classes",
      "import Arkham.Types.Skill.Attrs",
      "import Arkham.Types.Skill.Runner",
      "",
      "newtype {dot} = {dot} SkillAttrs",
      "  deriving anyclass (IsSkill, HasModifiersFor env, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: SkillCard {dot}",
      "{dot|snakecase|camelcase} =",
      "  skill {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance SkillRunner env => RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) = {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/*.hs": {
    "type": "core",
    "alternate": "arkham-core/tests/Arkham/Types/{}Spec.hs",
    "template": [
      "module Arkham.Types.{dot}",
      "  ( undefined",
      "  )",
      "where",
      "",
      "import Arkham.Prelude"
    ]
  },
  "arkham-core/tests/Arkham/Types/*Spec.hs": {
    "alternate": "arkham-core/library/Arkham/Types/{}.hs",
    "template": [
      "module Arkham.Types.{dot}Spec",
      "  ( spec",
      "  )",
      "where",
      "",
      "import TestImport",
      "",
      "spec :: Spec",
      "spec = undefined"
    ]
  }
}
