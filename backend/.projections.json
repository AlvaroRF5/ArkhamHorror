{
  "arkham-core/library/Arkham/Types/Asset/Cards/*.hs": {
    "type": "asset",
    "alternate": "arkham-core/tests/Arkham/Types/Assets/Cards/{}Spec.hs",
    "template": [
      "{open}-# LANGUAGE UndecidableInstances #-{close}",
      "module Arkham.Types.Asset.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Import",
      "",
      "import Arkham.Types.Asset.Attrs",
      "",
      "newtype {dot} = {dot} Attrs",
      "  deriving newtype (Show, ToJSON, FromJSON)",
      "",
      "{dot|snakecase|camelcase} :: AssetId -> {dot}",
      "{dot|snakecase|camelcase} uuid =",
      "  {dot} $ baseAttrs uuid \"TODO\"",
      "",
      "instance HasActions env {dot} where",
      "  getActions iid window ({dot} attrs) = getActions iid window attrs",
      "",
      "instance HasModifiersFor env {dot} where",
      "  getModifiersFor = noModifiersFor",
      "",
      "instance (HasQueue env, HasModifiers env InvestigatorId) => RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) = {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Event/Cards/*.hs": {
    "type": "event",
    "alternate": "arkham-core/tests/Arkham/Types/Events/Cards/{}Spec.hs",
    "template": [
      "{open}-# LANGUAGE UndecidableInstances #-{close}",
      "module Arkham.Types.Event.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Import",
      "",
      "import Arkham.Types.Event.Attrs",
      "",
      "newtype {dot} = {dot} Attrs",
      "  deriving newtype (Show, ToJSON, FromJSON)",
      "",
      "{dot|snakecase|camelcase} :: InvestigatorId -> EventId -> {dot}",
      "{dot|snakecase|camelcase} iid uuid =",
      "  {dot} $ baseAttrs iid uuid \"TODO\"",
      "",
      "instance HasActions env {dot} where",
      "  getActions iid window ({dot} attrs) = getActions iid window attrs",
      "",
      "instance HasModifiersFor env {dot} where",
      "  getModifiersFor = noModifiersFor",
      "",
      "instance HasQueue env => RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) = {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/Skill/Cards/*.hs": {
    "type": "skill",
    "alternate": "arkham-core/tests/Arkham/Types/Skill/Cards/{}Spec.hs",
    "template": [
      "{open}-# LANGUAGE UndecidableInstances #-{close}",
      "module Arkham.Types.Skill.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Import",
      "",
      "import Arkham.Types.Skill.Attrs",
      "import Arkham.Types.Skill.Runner",
      "",
      "newtype {dot} = {dot} Attrs",
      "  deriving newtype (Show, ToJSON, FromJSON)",
      "",
      "{dot|snakecase|camelcase} :: InvestigatorId -> SkillId -> {dot}",
      "{dot|snakecase|camelcase} iid uuid =",
      "  {dot} $ baseAttrs iid uuid \"TODO\"",
      "",
      "instance HasActions env {dot} where",
      "  getActions iid window ({dot} attrs) = getActions iid window attrs",
      "",
      "instance SkillRunner env => RunMessage env {dot} where",
      "  runMessage msg ({dot} attrs) = {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Types/*.hs": {
    "type": "core",
    "alternate": "arkham-core/tests/Arkham/Types/{}Spec.hs",
    "template": [
      "module Arkham.Types.{dot}",
      "  ( undefined",
      "  )",
      "where",
      "",
      "import Arkham.Import"
    ]
  },
  "arkham-core/tests/Arkham/Types/*Spec.hs": {
    "alternate": "arkham-core/library/Arkham/Types/{}.hs",
    "template": [
      "module Arkham.Types.{dot}Spec",
      "  ( spec",
      "  )",
      "where",
      "",
      "import TestImport",
      "",
      "spec :: Spec",
      "spec = undefined"
    ]
  }
}
