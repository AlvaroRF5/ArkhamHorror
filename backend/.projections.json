{
  "arkham-core/library/Arkham/Effect/Effects/*.hs": {
    "type": "effect",
    "alternate": "arkham-core/tests/Arkham/Effect/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Effect.Effects.{dot}",
      "  ( {dot}(..)",
      "  , {dot|snakecase|camelcase}",
      "  ) where",
      "",
      "import Arkham.Prelude",
      "",
      "import Arkham.Classes",
      "import Arkham.Effect.Attrs",
      "",
      "newtype {dot} = {dot} EffectAttrs",
      "  deriving anyclass HasAbilities",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: EffectArgs -> {dot}",
      "{dot|snakecase|camelcase} = {dot} . uncurry4 (baseAttrs \"TODO: ID\")",
      "",
      "instance HasModifiersFor {dot}",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Act/Cards/*.hs": {
    "type": "act",
    "alternate": "arkham-core/tests/Arkham/Act/Cards/{}Spec.hs",
    "template": [
       "module Arkham.Act.Cards.{dot}",
       "  ( {dot}(..)",
       "  , {dot|snakecase|camelcase}",
       "  ) where",
       "",
       "import Arkham.Prelude",
       "",
       "import qualified Arkham.Act.Cards as Cards",
       "import Arkham.Act.Runner",
       "import Arkham.Classes",
       "",
       "newtype {dot} = {dot} ActAttrs",
       "  deriving anyclass (IsAct, HasModifiersFor, HasAbilities)",
       "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
       "",
       "{dot|snakecase|camelcase} :: ActCard {dot}",
       "{dot|snakecase|camelcase} = act (1, A) {dot} Cards.{dot|snakecase|camelcase} Nothing",
       "",
       "instance RunMessage {dot} where",
       "  runMessage msg ({dot} attrs) = {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Scenario/Scenarios/*.hs": {
    "type": "scenario",
    "alternate": "arkham-core/tests/Arkham/Scenario/Scenarios/{}Spec.hs",
    "template": [
      "module Arkham.Scenario.Scenarios.{dot}",
      "  ( {dot}(..)",
      "  , {dot|snakecase|camelcase}",
      "  ) where",
      "",
      "import Arkham.Prelude",
      "",
      "import Arkham.Classes",
      "import Arkham.Difficulty",
      "import Arkham.InvestigatorId",
      "import Arkham.Scenario.Attrs",
      "import Arkham.Token",
      "",
      "newtype {dot} = {dot} ScenarioAttrs",
      "  deriving anyclass (IsScenario, HasModifiersFor)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: Difficulty -> {dot}",
      "{dot|snakecase|camelcase} difficulty = {dot} $ baseAttrs",
      "  \"TODO: ID\"",
      "  \"TODO: NAME\"",
      "  difficulty",
      "",
      "instance HasTokenValue {dot} where",
      "  getTokenValue iid tokenFace ({dot} attrs) = case tokenFace of",
      "    Skull -> pure $ toTokenValue attrs Skull 3 5",
      "    Cultist -> pure $ TokenValue Cultist NoModifier",
      "    Tablet -> pure $ TokenValue Tablet NoModifier",
      "    ElderThing -> pure $ TokenValue ElderThing NoModifier",
      "    otherFace -> getTokenValue iid otherFace attrs",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Campaign/Campaigns/*.hs": {
    "type": "campaign",
    "alternate": "arkham-core/tests/Arkham/Campaign/Campaigns/{}Spec.hs",
    "template": [
       "module Arkham.Campaign.Campaigns.{dot}",
       "  ( {dot}(..)",
       "  , {dot|snakecase|camelcase}",
       "  ) where",
       "",
       "import Arkham.Prelude",
       "",
       "import Arkham.Campaign.Runner",
       "import Arkham.CampaignId",
       "import Arkham.Classes",
       "import Arkham.Difficulty",
       "import Arkham.Token",
       "",
       "newtype {dot} = {dot} CampaignAttrs",
       "  deriving anyclass IsCampaign",
       "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
       "",
       "{dot|snakecase|camelcase} :: Difficulty -> {dot}",
       "{dot|snakecase|camelcase} difficulty = {dot} $ baseAttrs",
       "  (CampaignId \"TODO: ID\")",
       "  \"TODO: Name\"",
       "  difficulty",
       "  chaosBagContents",
       " where",
       "  chaosBagContents = case difficulty of",
       "    Easy -> []",
       "    Standard -> []",
       "    Hard -> []",
       "    Expert -> []",
       "",
       "instance RunMessage {dot} where",
       "  runMessage msg ({dot} attrs) = {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Agenda/Cards/*.hs": {
    "type": "agenda",
    "alternate": "arkham-core/tests/Arkham/Agenda/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Agenda.Cards.{dot}",
      "  ( {dot}",
      "  , {dot|snakecase|camelcase}",
      "  ) where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Agenda.Cards as Cards",
      "import Arkham.Agenda.Runner",
      "import Arkham.Classes",
      "import Arkham.GameValue",
      "import Arkham.Message",
      "",
      "newtype {dot} = {dot} AgendaAttrs",
      "  deriving anyclass (IsAgenda, HasModifiersFor, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: AgendaCard {dot}",
      "{dot|snakecase|camelcase} = agenda (1, A) {dot} Cards.{dot|snakecase|camelcase} (Static 12)",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg a@({dot} attrs) =",
      "    case msg of",
      "      AdvanceAgenda aid | aid == toId attrs && onSide B attrs ->",
      "        a <$ pushAll [AdvanceAgendaDeck (agendaDeckId attrs) (toSource attrs)]",
      "      _ -> {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Treachery/Cards/*.hs": {
    "type": "treachery",
    "alternate": "arkham-core/tests/Arkham/Treachery/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Treachery.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Treachery.Cards as Cards",
      "import Arkham.Classes",
      "import Arkham.Message",
      "import Arkham.Treachery.Runner",
      "",
      "newtype {dot} = {dot} TreacheryAttrs",
      "  deriving anyclass (IsTreachery, HasModifiersFor, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: TreacheryCard {dot}",
      "{dot|snakecase|camelcase} = treachery {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg t@({dot} attrs) = case msg of",
      "    Revelation _iid source | isSource attrs source -> t <$ push (Discard $ toTarget attrs)",
      "    _ -> {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Investigator/Cards/*.hs": {
    "type": "investigator",
    "alternate": "arkham-core/tests/Arkham/Investigator/Cards/{}Spec.hs"
  },
  "arkham-core/library/Arkham/Enemy/Cards/*.hs": {
    "type": "enemy",
    "alternate": "arkham-core/tests/Arkham/Enemy/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Enemy.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Enemy.Cards as Cards",
      "import Arkham.Classes",
      "import Arkham.Enemy.Runner",
      "",
      "newtype {dot} = {dot} EnemyAttrs",
      "  deriving anyclass (IsEnemy, HasModifiersFor)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity, HasAbilities)",
      "",
      "{dot|snakecase|camelcase} :: EnemyCard {dot}",
      "{dot|snakecase|camelcase} = enemy {dot} Cards.{dot|snakecase|camelcase} (0, Static 1, 0) (0, 0)",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Asset/Cards/*.hs": {
    "type": "asset",
    "alternate": "arkham-core/tests/Arkham/Asset/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Asset.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Asset.Cards as Cards",
      "import Arkham.Asset.Runner",
      "",
      "newtype {dot} = {dot} AssetAttrs",
      "  deriving anyclass (IsAsset, HasModifiersFor, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: AssetCard {dot}",
      "{dot|snakecase|camelcase} =",
      "  asset {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) = {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Event/Cards/*.hs": {
    "type": "event",
    "alternate": "arkham-core/tests/Arkham/Events/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Event.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Event.Cards as Cards",
      "import Arkham.Classes",
      "import Arkham.Event.Runner",
      "import Arkham.Message",
      "",
      "newtype {dot} = {dot} EventAttrs",
      "  deriving anyclass (IsEvent, HasModifiersFor, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: EventCard {dot}",
      "{dot|snakecase|camelcase} =",
      "  event {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg e@({dot} attrs) = case msg of",
      "    InvestigatorPlayEvent _ eid _ _ _ | eid == toId attrs -> do",
      "      e <$ pushAll [Discard (toTarget attrs)]",
      "    _ -> {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/Location/Cards/*.hs": {
    "type": "location",
    "alternate": "arkham-core/tests/Arkham/Location/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Location.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Location.Cards as Cards",
      "import Arkham.Classes",
      "import Arkham.GameValue",
      "import Arkham.Location.Runner",
      "",
      "newtype {dot} = {dot} LocationAttrs",
      "  deriving anyclass (IsLocation, HasModifiersFor)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: LocationCard {dot}",
      "{dot|snakecase|camelcase} = location {dot} Cards.{dot|snakecase|camelcase} 0 (Static 0) NoSymbol []",
      "",
      "instance HasAbilities {dot} where",
      "  getAbilities ({dot} attrs) =",
      "    getAbilities attrs",
      "    -- withBaseAbilities attrs []",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) =",
      "    {dot} <$> runMessage msg attrs"
      ]
  },
  "arkham-core/library/Arkham/Skill/Cards/*.hs": {
    "type": "skill",
    "alternate": "arkham-core/tests/Arkham/Skill/Cards/{}Spec.hs",
    "template": [
      "module Arkham.Skill.Cards.{dot}",
      "  ( {dot|snakecase|camelcase}",
      "  , {dot}(..)",
      "  )",
      "where",
      "",
      "import Arkham.Prelude",
      "",
      "import qualified Arkham.Skill.Cards as Cards",
      "import Arkham.Classes",
      "import Arkham.Skill.Runner",
      "",
      "newtype {dot} = {dot} SkillAttrs",
      "  deriving anyclass (IsSkill, HasModifiersFor, HasAbilities)",
      "  deriving newtype (Show, Eq, ToJSON, FromJSON, Entity)",
      "",
      "{dot|snakecase|camelcase} :: SkillCard {dot}",
      "{dot|snakecase|camelcase} =",
      "  skill {dot} Cards.{dot|snakecase|camelcase}",
      "",
      "instance RunMessage {dot} where",
      "  runMessage msg ({dot} attrs) = {dot} <$> runMessage msg attrs"
    ]
  },
  "arkham-core/library/Arkham/*.hs": {
    "type": "core",
    "alternate": "arkham-core/tests/Arkham/{}Spec.hs",
    "template": [
      "module Arkham.{dot}",
      "  ( undefined",
      "  )",
      "where",
      "",
      "import Arkham.Prelude"
    ]
  },
  "arkham-core/tests/Arkham/*Spec.hs": {
    "alternate": "arkham-core/library/Arkham/{}.hs",
    "template": [
      "module Arkham.{dot}Spec",
      "  ( spec",
      "  )",
      "where",
      "",
      "import TestImport",
      "",
      "spec :: Spec",
      "spec = undefined"
    ]
  }
}
